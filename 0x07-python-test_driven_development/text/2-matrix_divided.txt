The ``2-matrix_divided`` module
======================

Using ``matrix_divided``
-------------------

This is an add_integer test file
First import ``matrix_divided`` from the ``2-matrix_divided`` module:
    >>> matrix_divided = __import__("2-matrix_divided").matrix_divided

Matrix isn't list (str, tuple, int, dict, float):
    >>> matrix_divided([], 3)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided("1", 3)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided((1, 2), 3)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided(1, 3)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided({"1": 1}, 3)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided(0.1, 3)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Matrix list isn't list of lists (str, tuple, int, dict, float):
    >>> matrix_divided(["1"], 3)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided([(1, 2)], 3)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided([1], 3)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided([{"1": 1}], 3)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided([0.1], 3)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Matrix list of lists isn't int or float (str, tuple, dict, list):
    >>> matrix_divided([[]], 3)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided([["1"]], 3)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided([[(1, 2)]], 3)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided([[{"1": 1}]], 3)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

    >>> matrix_divided([[[0.1]]], 3)
    Traceback (most recent call last):
    ...
    TypeError: matrix must be a matrix (list of lists) of integers/floats

Matrix row's size:
    >>> matrix_divided([[1, 2, 3], [1, 2]], 3)
    Traceback (most recent call last):
    ...
    TypeError: Each row of the matrix must have the same size

divisor isn't int or float (str, tuple, list):
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], "3")
    Traceback (most recent call last):
    ...
    TypeError: div must be a number

    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], (3, 1))
    Traceback (most recent call last):
    ...
    TypeError: div must be a number

    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], [3, 2])
    Traceback (most recent call last):
    ...
    TypeError: div must be a number

divisor is zero:
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 0)
    Traceback (most recent call last):
    ...
    ZeroDivisionError: division by zero

Normal case:
    >>> matrix_divided([[1, 2, 3], [4, 5, 6]], 3)
    [[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]
